mutate(share_perc = count/total * 100) %>%
separate(dates, into = c('date', 'end'), sep = ' ') %>%
select(-end)
ggplot(df_overall, aes(x = as.Date(date), y = share_perc)) +
geom_line() +
ylim(0, 1) +
ggtitle("share (%) of AU jobs with 'penalty rate' or 'penalty rates'")
ggsave('time_series.png')
norm_date_range <- hl_iql_dates_generate(start_date = "2015-11-01",
end_date = "2019-11-01",
periodicity = "1 month")
waldo_queries <- list('"penalty rate" country:AU',
'"penalty rates" country:AU',
'"penalties" country:AU',
'"shift allowances" country:AU')
norm_custom_query <- "FROM searchablejobs {date}
WHERE jobid in ({jobid})
jobcountry = 'AU' waldoVisibilityLevel IN ('organic', 'jobalert')
sourcetype = 'Employer'
GROUP BY time(1mo), normTitle
SELECT distinct(jobid)"
norm_penalty_pulls <- purrr::map(waldo_queries, function(query) waldo2r::waldo.iql.filter(date_range = norm_date_range,
waldo_query_no_date = query,
country = 'AU',
custom_iql_query = norm_custom_query,
LDAP = "andour"))
df_norm <- purrr::reduce(norm_penalty_pulls, bind_rows) %>%
distinct() %>%
select('date' = X1, 'normtitle' = X2, 'count' = X3) %>%
separate(date, into = c("date", "drop1", "drop2", "drop3"), sep = " ") %>%
separate(date, into = c("drop", "date"), sep = "\\[") %>%
select('date', 'normtitle','count') %>%
mutate(date_group = case_when(
(as_date(date) >= as_date("2015-11-01") &
as_date(date) < as_date("2016-11-01")) ~ "2015-11-01 2016-11-01",
(as_date(date) >= as_date("2016-11-01") &
as_date(date) < as_date("2017-11-01")) ~ "2016-11-01 2017-11-01",
(as_date(date) >= as_date("2017-11-01") &
as_date(date) < as_date("2018-11-01")) ~ "2017-11-01 2018-11-01",
(as_date(date) >= as_date("2018-11-01") &
as_date(date) <= as_date("2019-11-01")) ~ "2018-11-01 2019-11-01")
) %>%
group_by(date_group, normtitle) %>%
summarise(count = n()) %>%
top_n(11)
# onetid ------------------------------------------------------------------
onet_date_range <- hl_iql_dates_generate(start_date = "2015-11-01",
end_date = "2019-11-01",
periodicity = "1 month")
waldo_queries <- list('"penalty rate" country:AU',
'"penalty rates" country:AU',
'"penalties" country:AU',
'"shift allowances" country:AU')
onet_custom_query <- "FROM searchablejobs {date}
WHERE jobid in ({jobid})
jobcountry = 'AU' waldoVisibilityLevel IN ('organic', 'jobalert')
sourcetype = 'Employer'
GROUP BY time(1mo), onetid
SELECT DISTINCT(jobid)"
onet_penalty_pulls <- purrr::map(waldo_queries, function(query) waldo2r::waldo.iql.filter(date_range = onet_date_range,
waldo_query_no_date = query,
country = 'AU',
custom_iql_query = onet_custom_query,
LDAP = "andour"))
df_onet <- purrr::reduce(onet_penalty_pulls, bind_rows) %>%
distinct() %>%
select('date' = X1, 'onetid' = X2, 'count' = X3) %>%
separate(date, into = c("date", "drop1", "drop2", "drop3"), sep = " ") %>%
separate(date, into = c("drop", "date"), sep = "\\[") %>%
select('date', 'onetid','count') %>%
mutate(date_group = case_when(
(as_date(date) >= as_date("2015-11-01") &
as_date(date) < as_date("2016-11-01")) ~ "2015-11-01 2016-11-01",
(as_date(date) >= as_date("2016-11-01") &
as_date(date) < as_date("2017-11-01")) ~ "2016-11-01 2017-11-01",
(as_date(date) >= as_date("2017-11-01") &
as_date(date) < as_date("2018-11-01")) ~ "2017-11-01 2018-11-01",
(as_date(date) >= as_date("2018-11-01") &
as_date(date) <= as_date("2019-11-01")) ~ "2018-11-01 2019-11-01")
) %>%
group_by(date_group, onetid) %>%
summarise(count = sum(count)) %>%
top_n(11) %>%
ungroup() %>%
mutate(onet_elaborate = iql_elaborate(field = 'onetid', values = .$onetid)) %>%
select(date_group, onetid, onet_elaborate, count)
penalty_save <- list('overall penalty' = df_overall,
'penalty jobids' = df_penalty,
'normtitles' = df_norm,
'onet' = df_onet)
openxlsx::write.xlsx(penalty_save, 'penalty_results_update.xlsx')
library(iqlr)
library(glue)
library(tidyverse)
# JOURNAL DE L'AUTO - GUIDE :
# Two sections searches and postings
# Change the month on top and make sure you change for both variables year_month and month
# This script will generate a new directory where there will be 2 R scripts with the latest update for postings and searches
# The latest dashboard should be in the excel file here : ~/Google Drive/Hiring Lab/Blogs/Alassane/FR/Journal auto
# Create a copy of this dashboard and store it in the new folder generated by this script
# Plug in the values generated by this script in the original dashboard
# After the update and rename according to month of update
year_month <- "Oct 2019"
month <- "2019-10-01 2019-11-01"
dir.create(glue("~/Google Drive/Hiring Lab/Blogs/Alassane/FR/Journal auto/{year_month}"))
setwd(glue("~/Google Drive/Hiring Lab/Blogs/Alassane/FR/Journal auto/{year_month}"))
# RECHERCHE ---------------------------------------------------------------
region_code <- openxlsx::read.xlsx("~/Google Drive/Hiring Lab/Blogs/Alassane/FR/Journal auto/Code Region.xlsx")
# Region search table
recherche_region <- iql2(glue('FROM
jobsearch (qnorm =~ \'.*("automobile"|"concession"|"après-vente connecté"|mécanicien|carrossier|garagiste|"poids lourd"|"deux-roues"|"product genious"|"connectivité"|"voiture").*\') {month} as car_job,
mobsearch (qnorm =~ \'.*("automobile"|"concession"|"après-vente connecté"|mécanicien|carrossier|garagiste|"poids lourd"|"deux-roues"|"product genious"|"connectivité"|"voiture").*\') as car_mob,
jobsearch as all_job,
mobsearch as all_mob
WHERE (rcv="jsv") (grp!="spider") (grp!="privileged") (rcv="interaction") (page=1) (country="fr")
GROUP BY sladmin1
SELECT (car_job.count() + car_mob.count())/(all_job.count() + all_mob.count()) as region_share')) %>%
filter(nchar(sladmin1)>3) %>%
arrange(desc(region_share)) %>%
filter((sladmin1 == "d'azur"|sladmin1 != "loire"))
# Keyword ranking se`rch table`
top_mot_recherche<- iql2(glue('FROM
jobsearch (qnorm =~ \'.*("automobile"|"concession"|"après-vente connecté"|mécanicien|carrossier|garagiste|"poids lourd"|"deux-roues"|"product genious"|"connectivité"|"voiture").*\') {month} as car_job,
mobsearch (qnorm =~ \'.*("automobile"|"concession"|"après-vente connecté"|mécanicien|carrossier|garagiste|"poids lourd"|"deux-roues"|"product genious"|"connectivité"|"voiture").*\') as car_mob
WHERE (rcv="jsv") (grp!="spider") (grp!="privileged") (rcv="interaction") (page=1) (country="fr")
GROUP BY qnorm[10]'))
# Share searches table
part_recherche <- iql2(glue("FROM
jobsearch (qnorm =~ \".*('automobile'|'concession'|'après-vente connecté'|mécanicien|carrossier|garagiste|'poids lourd'|'deux-roues'|'product genious'|'connectivité'|'voiture').*\") {month} as car_job,
mobsearch (qnorm =~ \".*('automobile'|'concession'|'après-vente connecté'|mécanicien|carrossier|garagiste|'poids lourd'|'deux-roues'|'product genious'|'connectivité'|'voiture').*\") as car_mob,
jobsearch as all_job,
mobsearch as all_mob
WHERE (rcv='jsv') (grp!='spider') (grp!='privileged') (rcv='interaction') (page=1) (country='fr')
group by time(1mo)
SELECT (car_job.count() + car_mob.count())/(all_job.count() + all_mob.count()) *100"))
# keyword evolution searches table
keywords <- c("automobile", "constructeur automobile", "concession automobile", "commerce automobile", "vente automobile", "après-vente automobile", "après-vente connecté", "mécanicien", "carrossier", "garagiste", "poids lourd", "deux-roues", "ingénieur automobile" , "ingénieur en mécanique automobile", "ingénieur en R&D (ou recherche et développement)", "product genious", "marketing automobile","connectivité automobile", "voiture autonome")
for(counter in 1:length(keywords)){
words_seperated <- strsplit(keywords[[counter]], split = ' ')
words_seperated <- lapply(words_seperated, function(X) glue('q in ("{X}")' ))
words_seperated <- paste(unlist(words_seperated), collapse = ' ')
keywords[counter] <- words_seperated
}
part_mot_recherche_query <- str_c("FROM
jobsearch ({x}) {month} as car_job,
mobsearch ({x}) as car_mob,
jobsearch as all_job,
mobsearch as all_mob
WHERE (rcv='jsv') (grp!='spider') (grp!='privileged') (rcv='interaction') (page=1) (country='fr')
SELECT (car_job.count() + car_mob.count())/(all_job.count() + all_mob.count()) * 1000000 as total")
part_mot_recherche_map <- map(keywords, function(x) iql2(glue(part_mot_recherche_query)) %>%
mutate(mot_clef = x, month = month) %>%
select(month, mot_clef, total))
part_mot_recherche <- reduce(part_mot_recherche_map, bind_rows) %>%
select(mot_clef, total) %>%
arrange(desc(total))
resultats_offre <- list('recherche par region' = recherche_region,
'top 10 mots clef' = top_mot_recherche,
'part auto des recherches' = part_recherche,
'part mots clefs' = part_mot_recherche)
openxlsx::write.xlsx(resultats_offre, glue('Resultats recherche {year_month}.xlsx'))
# OFFRE -------------------------------------------------------------------
# Share per region postings
offre_region <- iql2(glue('FROM
searchablejobs (titleword2 =~ \'.*("automobile"|"concession"|"après-vente connecté"|mécanicien|carrossier|garagiste|"poids lourd"|"deux-roues"|"product genious"|"connectivité"|"voiture").*\') {month} as car_jobs,
searchablejobs as all_jobs
WHERE jobcountry = "FR" waldoVisibilityLevel in ("jobalert", "organic") fccompany_id not in(69800939, 6045216)
GROUP BY jladmin1code
SELECT car_jobs.count()/all_jobs.count() * 100 as share_perc')) %>%
left_join(region_code, by = c('jladmin1code'='Code')) %>%
select(Région, share_perc) %>%
arrange(Région) %>%
na.omit(.)
# Top position postings table
top_mot_offre <- iql2(glue('FROM
searchablejobs (titleword2 =~ \'.*("automobile"|"concession"|"après-vente connecté"|mécanicien|carrossier|garagiste|"poids lourd"|"deux-roues"|"product genious"|"connectivité"|"voiture").*\') {month} as car_jobs
WHERE jobcountry = "FR" waldoVisibilityLevel in ("jobalert", "organic")
GROUP BY normTitle[10]')) %>%
arrange(desc(count)) %>%
na.omit(.)
# Evolution of share table
part_offre <- iql2(glue("FROM
searchablejobs (titleword2 =~ \".*('automobile'|'concession'|'après-vente connecté'|mécanicien|carrossier|garagiste|'poids lourd'|'deux-roues'|'product genious'|'connectivité'|'voiture').*\") {month} as car_jobs,
searchablejobs as all_jobs
WHERE jobcountry = 'FR' waldoVisibilityLevel in ('jobalert', 'organic') fccompany_id not in(69800939, 6045216)
SELECT car_jobs.count()/all_jobs.count() * 100"))
resultats_offre <- list('offre par region' = offre_region,
'top mots offre' = top_mot_offre,
'part auto des offres' = part_offre)
openxlsx::write.xlsx(resultats_offre, glue('Resultats offre {year_month}.xlsx'))
devtools::install_github("benmarwick/wordcountaddin", type = "source", dependencies = TRUE)
devtools::install_github("benmarwick/wordcountaddin", type = "source", dependencies = TRUE)
.rs.restartR()
wordcountaddin:::text_stats()
(997 + 992)/2000
(587 + 883)/(413+117)
(587 + 883)/2000
wordcountaddin:::text_stats()
x_values = c(c(1,2,3,4), c(1,2,3,4))
y_values = c(c(0.0292397 , -0.17179935, -0.17689538,  0.08520864), c(0.87666226,  0.8946675 ,  1.17698528,  1.30887881))
label = c("logistic", "linear")
drift_line = c(FALSE, FALSE)
parameters = c(list("alpha" = 0.1, "beta" = 0.02),
list("x0" = 0.3, "L" = 1, "k" = 0.6))
variance_bucket = c(0.1, 0.1)
head(dplyr::tibble(c("x_values"  = x_values,
"y_values" = y_values,
"parameters" = parameters,
"variance_bucket" = variance_bucket,
"functional_form" = label,
"drift_line" = drift_line)))
x_values = c(c(1,2,3,4), c(1,2,3,4))
y_values = c(c(0.0292397 , -0.17179935, -0.17689538,  0.08520864), c(0.87666226,  0.8946675 ,  1.17698528,  1.30887881))
label = c("logistic", "linear")
drift_line = c(FALSE, FALSE)
parameters = c(list("alpha" = 0.1, "beta" = 0.02),
list("x0" = 0.3, "L" = 1, "k" = 0.6))
variance_bucket = c(0.1, 0.1)
head(dplyr::tibble("x_values"  = x_values,
"y_values" = y_values,
"parameters" = parameters,
"variance_bucket" = variance_bucket,
"functional_form" = label,
"drift_line" = drift_line))
x_values = c(c(1,2,3,4), c(1,2,3,4))
y_values = c(c(0.0292397 , -0.17179935, -0.17689538,  0.08520864), c(0.87666226,  0.8946675 ,  1.17698528,  1.30887881))
label = c("logistic", "linear")
drift_line = c(FALSE, FALSE)
parameters = c(list("alpha" = 0.1, "beta" = 0.02),
list("x0" = 0.3, "L" = 1, "k" = 0.6))
variance_bucket = c(0.1, 0.1)
data.frame("x_values"  = x_values,
"y_values" = y_values,
"parameters" = parameters,
"variance_bucket" = variance_bucket,
"functional_form" = label,
"drift_line" = drift_line)
tibble::as.tibble("x_values"  = x_values,
"y_values" = y_values,
"parameters" = parameters,
"variance_bucket" = variance_bucket,
"functional_form" = label,
"drift_line" = drift_line)
x_values = c(c(1,2,3,4),
c(1,2,3,4))
y_values = c(c(0.0292397 , -0.17179935, -0.17689538,  0.08520864),
c(0.87666226,  0.8946675 ,  1.17698528,  1.30887881))
label = c("logistic",
"linear")
drift_line = c(FALSE,
FALSE)
parameters = c(list("alpha" = 0.1, "beta" = 0.02),
list("x0" = 0.3, "L" = 1, "k" = 0.6))
variance_bucket = c(0.1,
0.1)
tibble::tibble("x_values"  = x_values,
"y_values" = y_values,
"parameters" = parameters,
"variance_bucket" = variance_bucket,
"functional_form" = label,
"drift_line" = drift_line)
x_values = c(c(1,2,3,4),
c(1,2,3,4))
y_values = c(c(0.0292397 , -0.17179935, -0.17689538,  0.08520864),
c(0.87666226,  0.8946675 ,  1.17698528,  1.30887881))
label = c("logistic",
"linear")
drift_line = c(FALSE,
FALSE)
parameters = c(list("alpha" = 0.1, "beta" = 0.02),
list("x0" = 0.3, "L" = 1, "k" = 0.6))
variance_bucket = c(0.1,
0.1)
as.matrix("x_values"  = x_values,
"y_values" = y_values,
"parameters" = parameters,
"variance_bucket" = variance_bucket,
"functional_form" = label,
"drift_line" = drift_line)
wordcountaddin:::text_stats()
17400/3
2938/17422
17422/2938
5.9*1000
knitr::include_graphics("/Users/andour/Google Drive/projects/Dissertation/Final figures/freq_norm_distrib.png")
knitr::include_graphics("/Users/andour/Google Drive/projects/Dissertation/Final figures/freq_norm_distrib.png")
knitr::include_graphics("/Users/andour/Google Drive/projects/Dissertation/Final figures/freq_norm_distrib.png")
knitr::include_graphics("/Users/andour/Google Drive/projects/Dissertation/Final figures/freq_norm_distrib.png")
knitr::include_graphics("/Users/andour/Google Drive/projects/Dissertation/Final figures/freq_norm_distrib.png")
knitr::include_graphics("/Users/andour/Google Drive/projects/Dissertation/Final figures/data_samples.png")
knitr::include_graphics("/Users/andour/Google Drive/projects/Dissertation/Final figures/data_samples.png")
knitr::include_graphics("/Users/andour/Google Drive/projects/Dissertation/Final figures/data_samples.png")
knitr::include_graphics("/Users/andour/Google Drive/projects/Dissertation/Final figures/data_samples.png")
knitr::include_graphics("/Users/andour/Google Drive/projects/Dissertation/Final figures/data_samples.png")
knitr::include_graphics("/Users/andour/Google Drive/projects/Dissertation/Final figures/data_samples.png")
knitr::include_graphics("/Users/andour/Google Drive/projects/Dissertation/Final figures/data_samples.png")
knitr::include_graphics("/Users/andour/Google Drive/projects/Dissertation/Final figures/data_samples.png")
knitr::include_graphics("/Users/andour/Google Drive/projects/Dissertation/Final figures/data_samples.png")
knitr::include_graphics("/Users/andour/Google Drive/projects/Dissertation/Final figures/data_samples.png")
wordcountaddin:::text_stats()
knitr::include_graphics("/Users/andour/Google Drive/projects/Dissertation/Final figures/freq_norm_distrib.png")
wordcountaddin:::text_stats()
wordcountaddin:::text_stats()
wordcountaddin:::text_stats()
wordcountaddin:::text_stats()
wordcountaddin:::text_stats()
year_month <- "Sep 2019"
month <- "2019-09-01 2019-10-01"
dir.create(glue("~/Google Drive/Hiring Lab/Blogs/Alassane/FR/Journal auto/{year_month}"))
setwd(glue("~/Google Drive/Hiring Lab/Blogs/Alassane/FR/Journal auto/{year_month}"))
library(iqlr)
library(glue)
library(tidyverse)
year_month <- "Sep 2019"
month <- "2019-09-01 2019-10-01"
dir.create(glue("~/Google Drive/Hiring Lab/Blogs/Alassane/FR/Journal auto/{year_month}"))
setwd(glue("~/Google Drive/Hiring Lab/Blogs/Alassane/FR/Journal auto/{year_month}"))
region_code <- openxlsx::read.xlsx("~/Google Drive/Hiring Lab/Blogs/Alassane/FR/Journal auto/Code Region.xlsx")
# Region search table
recherche_region <- iql2(glue('FROM
jobsearch (qnorm =~ \'.*("automobile"|"concession"|"après-vente connecté"|mécanicien|carrossier|garagiste|"poids lourd"|"deux-roues"|"product genious"|"connectivité"|"voiture").*\') {month} as car_job,
mobsearch (qnorm =~ \'.*("automobile"|"concession"|"après-vente connecté"|mécanicien|carrossier|garagiste|"poids lourd"|"deux-roues"|"product genious"|"connectivité"|"voiture").*\') as car_mob,
jobsearch as all_job,
mobsearch as all_mob
WHERE (rcv="jsv") (grp!="spider") (grp!="privileged") (rcv="interaction") (page=1) (country="fr")
GROUP BY sladmin1
SELECT (car_job.count() + car_mob.count())/(all_job.count() + all_mob.count()) as region_share')) %>%
filter(nchar(sladmin1)>3) %>%
arrange(desc(region_share)) %>%
filter((sladmin1 == "d'azur"|sladmin1 != "loire"))
# Keyword ranking se`rch table`
top_mot_recherche<- iql2(glue('FROM
jobsearch (qnorm =~ \'.*("automobile"|"concession"|"après-vente connecté"|mécanicien|carrossier|garagiste|"poids lourd"|"deux-roues"|"product genious"|"connectivité"|"voiture").*\') {month} as car_job,
mobsearch (qnorm =~ \'.*("automobile"|"concession"|"après-vente connecté"|mécanicien|carrossier|garagiste|"poids lourd"|"deux-roues"|"product genious"|"connectivité"|"voiture").*\') as car_mob
WHERE (rcv="jsv") (grp!="spider") (grp!="privileged") (rcv="interaction") (page=1) (country="fr")
GROUP BY qnorm[10]'))
# Share searches table
part_recherche <- iql2(glue('FROM
jobsearch (qnorm =~ \'.*("automobile"|"concession"|"après-vente connecté"|mécanicien|carrossier|garagiste|"poids lourd"|"deux-roues"|"product genious"|"connectivité"|"voiture").*\') {month} as car_job,
mobsearch (qnorm =~ \'.*("automobile"|"concession"|"après-vente connecté"|mécanicien|carrossier|garagiste|"poids lourd"|"deux-roues"|"product genious"|"connectivité"|"voiture").*\') as car_mob
jobsearch as all_job,
mobsearch as all_mob
WHERE (rcv="jsv") (grp!="spider") (grp!="privileged") (rcv="interaction") (page=1) (country="fr")
group by time(1mo)
SELECT (car_job.count() + car_mob.count())/(all_job.count() + all_mob.count()) *100'))
# keyword evolution searches table
keywords <- c("automobile", "constructeur automobile", "concession automobile", "commerce automobile", "vente automobile", "après-vente automobile", "après-vente connecté", "mécanicien", "carrossier", "garagiste", "poids lourd", "deux-roues", "ingénieur automobile" , "ingénieur en mécanique automobile", "ingénieur en R&D (ou recherche et développement)", "product genious", "marketing automobile","connectivité automobile", "voiture autonome")
for(counter in 1:length(keywords)){
words_seperated <- strsplit(keywords[[counter]], split = ' ')
words_seperated <- lapply(words_seperated, function(X) glue('q in ("{X}")' ))
words_seperated <- paste(unlist(words_seperated), collapse = ' ')
keywords[counter] <- words_seperated
}
part_mot_recherche_query <- str_c("FROM
jobsearch ({x}) {month} as car_job,
mobsearch ({x}) as car_mob,
jobsearch as all_job,
mobsearch as all_mob
WHERE (rcv='jsv') (grp!='spider') (grp!='privileged') (rcv='interaction') (page=1) (country='fr')
SELECT (car_job.count() + car_mob.count())/(all_job.count() + all_mob.count()) * 1000000 as total")
part_mot_recherche_map <- map(keywords, function(x) iql2(glue(part_mot_recherche_query)) %>%
mutate(mot_clef = x, month = month) %>%
select(month, mot_clef, total))
part_mot_recherche <- reduce(part_mot_recherche_map, bind_rows) %>%
select(mot_clef, total) %>%
arrange(desc(total))
resultats_offre <- list('recherche par region' = recherche_region,
'top 10 mots clef' = top_mot_recherche,
'part auto des recherches' = part_recherche,
'part mots clefs' = part_mot_recherche)
openxlsx::write.xlsx(resultats_offre, glue('Resultats recherche {year_month}.xlsx'))
# OFFRE -------------------------------------------------------------------
# Share per region postings
offre_region <- iql2(glue('FROM
searchablejobs (titleword2 =~ \'.*("automobile"|"concession"|"après-vente connecté"|mécanicien|carrossier|garagiste|"poids lourd"|"deux-roues"|"product genious"|"connectivité"|"voiture").*\') {month} as car_jobs,
searchablejobs as all_jobs
WHERE jobcountry = "FR" waldoVisibilityLevel in ("jobalert", "organic") fccompany_id not in(69800939, 6045216)
GROUP BY jladmin1code
SELECT car_jobs.count()/all_jobs.count() * 100 as share_perc')) %>%
left_join(region_code, by = c('jladmin1code'='Code')) %>%
select(Région, share_perc) %>%
arrange(Région) %>%
na.omit(.)
# Top position postings table
top_mot_offre <- iql2(glue('FROM
searchablejobs (titleword2 =~ \'.*("automobile"|"concession"|"après-vente connecté"|mécanicien|carrossier|garagiste|"poids lourd"|"deux-roues"|"product genious"|"connectivité"|"voiture").*\') {month} as car_jobs
WHERE jobcountry = "FR" waldoVisibilityLevel in ("jobalert", "organic")
GROUP BY normTitle[10]')) %>%
arrange(desc(count)) %>%
na.omit(.)
# Evolution of share table
part_offre <- iql2(glue('FROM
searchablejobs (titleword2 =~ \'.*("automobile"|"concession"|"après-vente connecté"|mécanicien|carrossier|garagiste|"poids lourd"|"deux-roues"|"product genious"|"connectivité"|"voiture").*\') {month} as car_jobs
searchablejobs as all_jobs
WHERE jobcountry = "FR" waldoVisibilityLevel in ("jobalert", "organic") fccompany_id not in(69800939, 6045216)
SELECT car_jobs.count()/all_jobs.count() * 100'))
part_recherche <- iql2(glue('FROM
jobsearch (qnorm =~ \'.*("automobile"|"concession"|"après-vente connecté"|mécanicien|carrossier|garagiste|"poids lourd"|"deux-roues"|"product genious"|"connectivité"|"voiture").*\') {month} as car_job,
mobsearch (qnorm =~ \'.*("automobile"|"concession"|"après-vente connecté"|mécanicien|carrossier|garagiste|"poids lourd"|"deux-roues"|"product genious"|"connectivité"|"voiture").*\') as car_mob
jobsearch as all_job,
mobsearch as all_mob
WHERE (rcv="jsv") (grp!="spider") (grp!="privileged") (rcv="interaction") (page=1) (country="fr")
group by time(1mo)
SELECT (car_job.count() + car_mob.count())/(all_job.count() + all_mob.count()) *100'))
part_recherche <- iql2(glue('FROM
jobsearch (qnorm =~ \'.*("automobile"|"concession"|"après-vente connecté"|mécanicien|carrossier|garagiste|"poids lourd"|"deux-roues"|"product genious"|"connectivité"|"voiture").*\') {month} as car_job,
mobsearch (qnorm =~ \'.*("automobile"|"concession"|"après-vente connecté"|mécanicien|carrossier|garagiste|"poids lourd"|"deux-roues"|"product genious"|"connectivité"|"voiture").*\') as car_mob,
jobsearch as all_job,
mobsearch as all_mob
WHERE (rcv="jsv") (grp!="spider") (grp!="privileged") (rcv="interaction") (page=1) (country="fr")
group by time(1mo)
SELECT (car_job.count() + car_mob.count())/(all_job.count() + all_mob.count()) *100'))
View(part_recherche)
library(iqlr)
library(glue)
library(tidyverse)
# JOURNAL DE L'AUTO - GUIDE :
# Two sections searches and postings
# Change the month on top and make sure you change for both variables year_month and month
# This script will generate a new directory where there will be 2 R scripts with the latest update for postings and searches
# The latest dashboard should be in the excel file here : ~/Google Drive/Hiring Lab/Blogs/Alassane/FR/Journal auto
# Create a copy of this dashboard and store it in the new folder generated by this script
# Plug in the values generated by this script in the original dashboard
# After the update and rename according to month of update
year_month <- "Nov 2019"
month <- "2019-11-01 2019-12-01"
dir.create(glue("~/Google Drive/Hiring Lab/Blogs/Alassane/FR/Journal auto/{year_month}"))
setwd(glue("~/Google Drive/Hiring Lab/Blogs/Alassane/FR/Journal auto/{year_month}"))
# RECHERCHE ---------------------------------------------------------------
region_code <- openxlsx::read.xlsx("~/Google Drive/Hiring Lab/Blogs/Alassane/FR/Journal auto/Code Region.xlsx")
# Region search table
recherche_region <- iql2(glue('FROM
jobsearch (qnorm =~ \'.*("automobile"|"concession"|"après-vente connecté"|mécanicien|carrossier|garagiste|"poids lourd"|"deux-roues"|"product genious"|"connectivité"|"voiture").*\') {month} as car_job,
mobsearch (qnorm =~ \'.*("automobile"|"concession"|"après-vente connecté"|mécanicien|carrossier|garagiste|"poids lourd"|"deux-roues"|"product genious"|"connectivité"|"voiture").*\') as car_mob,
jobsearch as all_job,
mobsearch as all_mob
WHERE (rcv="jsv") (grp!="spider") (grp!="privileged") (rcv="interaction") (page=1) (country="fr")
GROUP BY sladmin1
SELECT (car_job.count() + car_mob.count())/(all_job.count() + all_mob.count()) as region_share')) %>%
filter(nchar(sladmin1)>3) %>%
arrange(desc(region_share)) %>%
filter((sladmin1 == "d'azur"|sladmin1 != "loire"))
# Keyword ranking se`rch table`
top_mot_recherche<- iql2(glue('FROM
jobsearch (qnorm =~ \'.*("automobile"|"concession"|"après-vente connecté"|mécanicien|carrossier|garagiste|"poids lourd"|"deux-roues"|"product genious"|"connectivité"|"voiture").*\') {month} as car_job,
mobsearch (qnorm =~ \'.*("automobile"|"concession"|"après-vente connecté"|mécanicien|carrossier|garagiste|"poids lourd"|"deux-roues"|"product genious"|"connectivité"|"voiture").*\') as car_mob
WHERE (rcv="jsv") (grp!="spider") (grp!="privileged") (rcv="interaction") (page=1) (country="fr")
GROUP BY qnorm[10]'))
# Share searches table
part_recherche <- iql2(glue('FROM
jobsearch (qnorm =~ \'.*("automobile"|"concession"|"après-vente connecté"|mécanicien|carrossier|garagiste|"poids lourd"|"deux-roues"|"product genious"|"connectivité"|"voiture").*\') {month} as car_job,
mobsearch (qnorm =~ \'.*("automobile"|"concession"|"après-vente connecté"|mécanicien|carrossier|garagiste|"poids lourd"|"deux-roues"|"product genious"|"connectivité"|"voiture").*\') as car_mob,
jobsearch as all_job,
mobsearch as all_mob
WHERE (rcv="jsv") (grp!="spider") (grp!="privileged") (rcv="interaction") (page=1) (country="fr")
group by time(1mo)
SELECT (car_job.count() + car_mob.count())/(all_job.count() + all_mob.count()) *100'))
# keyword evolution searches table
keywords <- c("automobile", "constructeur automobile", "concession automobile", "commerce automobile", "vente automobile", "après-vente automobile", "après-vente connecté", "mécanicien", "carrossier", "garagiste", "poids lourd", "deux-roues", "ingénieur automobile" , "ingénieur en mécanique automobile", "ingénieur en R&D (ou recherche et développement)", "product genious", "marketing automobile","connectivité automobile", "voiture autonome")
for(counter in 1:length(keywords)){
words_seperated <- strsplit(keywords[[counter]], split = ' ')
words_seperated <- lapply(words_seperated, function(X) glue('q in ("{X}")' ))
words_seperated <- paste(unlist(words_seperated), collapse = ' ')
keywords[counter] <- words_seperated
}
part_mot_recherche_query <- str_c("FROM
jobsearch ({x}) {month} as car_job,
mobsearch ({x}) as car_mob,
jobsearch as all_job,
mobsearch as all_mob
WHERE (rcv='jsv') (grp!='spider') (grp!='privileged') (rcv='interaction') (page=1) (country='fr')
SELECT (car_job.count() + car_mob.count())/(all_job.count() + all_mob.count()) * 1000000 as total")
part_mot_recherche_map <- map(keywords, function(x) iql2(glue(part_mot_recherche_query)) %>%
mutate(mot_clef = x, month = month) %>%
select(month, mot_clef, total))
part_mot_recherche <- reduce(part_mot_recherche_map, bind_rows) %>%
select(mot_clef, total) %>%
arrange(desc(total))
resultats_offre <- list('recherche par region' = recherche_region,
'top 10 mots clef' = top_mot_recherche,
'part auto des recherches' = part_recherche,
'part mots clefs' = part_mot_recherche)
openxlsx::write.xlsx(resultats_offre, glue('Resultats recherche {year_month}.xlsx'))
# OFFRE -------------------------------------------------------------------
# Share per region postings
offre_region <- iql2(glue('FROM
searchablejobs (titleword2 =~ \'.*("automobile"|"concession"|"après-vente connecté"|mécanicien|carrossier|garagiste|"poids lourd"|"deux-roues"|"product genious"|"connectivité"|"voiture").*\') {month} as car_jobs,
searchablejobs as all_jobs
WHERE jobcountry = "FR" waldoVisibilityLevel in ("jobalert", "organic") fccompany_id not in(69800939, 6045216)
GROUP BY jladmin1code
SELECT car_jobs.count()/all_jobs.count() * 100 as share_perc')) %>%
left_join(region_code, by = c('jladmin1code'='Code')) %>%
select(Région, share_perc) %>%
arrange(Région) %>%
na.omit(.)
# Top position postings table
top_mot_offre <- iql2(glue('FROM
searchablejobs (titleword2 =~ \'.*("automobile"|"concession"|"après-vente connecté"|mécanicien|carrossier|garagiste|"poids lourd"|"deux-roues"|"product genious"|"connectivité"|"voiture").*\') {month} as car_jobs
WHERE jobcountry = "FR" waldoVisibilityLevel in ("jobalert", "organic")
GROUP BY normTitle[10]')) %>%
arrange(desc(count)) %>%
na.omit(.)
# Evolution of share table
part_offre <- iql2(glue('FROM
searchablejobs (titleword2 =~ \'.*("automobile"|"concession"|"après-vente connecté"|mécanicien|carrossier|garagiste|"poids lourd"|"deux-roues"|"product genious"|"connectivité"|"voiture").*\') {month} as car_jobs,
searchablejobs as all_jobs
WHERE jobcountry = "FR" waldoVisibilityLevel in ("jobalert", "organic") fccompany_id not in(69800939, 6045216)
SELECT car_jobs.count()/all_jobs.count() * 100'))
resultats_offre <- list('offre par region' = offre_region,
'top mots offre' = top_mot_offre,
'part auto des offres' = part_offre)
openxlsx::write.xlsx(resultats_offre, glue('Resultats offre {year_month}.xlsx'))
